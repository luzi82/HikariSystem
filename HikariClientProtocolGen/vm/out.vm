package com.luzi82.hikari.client.protocol;

import java.util.concurrent.Future;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.databind.JsonNode;
import com.luzi82.concurrent.FutureCallback;
import com.luzi82.concurrent.RetryableFuture;
import com.luzi82.lang.GuriObservable;
import com.luzi82.hikari.client.endpoint.HsCmdManager;

public class ${main}Protocol extends ${main}ProtocolDef {

	public static final String APP_NAME = "${app_name}";
#foreach( $data in $data_list )

	public static List<${data.Cname}> get${data.Cname}List(
		final HsCmdManager cmdManager
	) {
		return cmdManager.getDataList(
			APP_NAME,
			"${data.Jname}",
			${data.Cname}.class
		);
	}
#end
#foreach( $status in $status_list )

	public static GuriObservable<${status.Cnamefull}> get${status.Cname}Observable(
		final HsCmdManager cmdManager
	) {
		return cmdManager.getStatusObservable(
			APP_NAME,
			"${status.Jname}",
			${status.Cnamefull}.class
		);
	}
#end
#foreach( $item in $item_list )

	public static void add${item.Cname}(
		Item.ListMap itemListMap,
#foreach( $field in $item.FieldList )
		${field.Type} ${field.Name}#if( $foreach.hasNext ),
#end#end

	) {
		${item.Cname} item = new ${item.Cname}();
#foreach( $field in $item.FieldList )
		item.${field.Name} = ${field.Name};
#end
		itemListMap.attach("${item.Jname}",item);
	}
	

	public static List<${item.Cname}> get${item.Cname}List(
		final HsCmdManager cmdManager,
		Map<String, List<JsonNode>> itemListMap
	) {
		return Item.ListMap.toList(itemListMap.get("${item.Jname}"),${item.Cname}.class,cmdManager.getObjectMapper());
	}
#end
#foreach( $cmd in $cmd_list )

	public static RetryableFuture<${cmd.Cname}.Result> ${cmd.Fname}(
		final HsCmdManager cmdManager,
#foreach( $req in $cmd.ReqList )
		${req.Type} ${req.Name},
#end
		final FutureCallback<${cmd.Cname}.Result> futureCallback
	) {
		final ${cmd.Cname}.Request request = new ${cmd.Cname}.Request();
#foreach( $req in $cmd.ReqList )
		request.${req.Name} = ${req.Name};
#end
		return cmdManager.sendRequest(
			APP_NAME,
			"${cmd.Jname}",
			request,
			${cmd.Cname}.Result.class,
			futureCallback
		);
	}
#end

}
